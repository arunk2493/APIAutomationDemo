{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2020-07-31T15:44:12.763Z",
    "end": "2020-07-31T15:44:18.206Z",
    "duration": 5443,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "25785de5-4fb1-4ac8-9d51-4da8808d8583",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
          "title": "Node fetch Demo",
          "fullFile": "/Users/arunkumaraswamy/Documents/projects/Study/APIAutomationTutorials/APIAutomationDemo/test/sample.spec.js",
          "file": "/test/sample.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Sample Get CAll using Json",
              "fullTitle": "Node fetch Demo Sample Get CAll using Json",
              "timedOut": false,
              "duration": 742,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch('http://dummy.restapiexample.com/api/v1/employees');\nconst json = await response.json();\n_cdd‍.g.console.log(json);\nconst statusValue = await json.status;\n_cdd‍.g.console.log(statusValue);\n_cdd‍.g.console.log(json.data[0].id);\nexpect(json.data[0].id).to.equal('1');",
              "err": {},
              "uuid": "5871bd2c-07fa-4306-839b-aa0f9b4cd270",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Get CAll with input using Json",
              "fullTitle": "Node fetch Demo Sample Get CAll with input using Json",
              "timedOut": false,
              "duration": 1110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input1 = 1;\nconst response = await fetch(`http://dummy.restapiexample.com/api/v1/employee/${input1}`);\nconst json = await response.json();\n_cdd‍.g.console.log(json);",
              "err": {},
              "uuid": "8e64ae13-cf29-4322-b6a9-0ea1c24e8b2c",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample POST CAll using Json",
              "fullTitle": "Node fetch Demo Sample POST CAll using Json",
              "timedOut": false,
              "duration": 1124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body1 = {name:\"test\",salary:\"123\",age:\"23\"};\nconst response = await fetch('http://dummy.restapiexample.com/api/v1/create', {\n    method: 'POST',\n    body: JSON.stringify(body1),\n    headers: {'Content-Type': 'application/json'}\n});\nconst json = await response.json();\n_cdd‍.g.console.log(json);\nexpect(json.data.name).to.equal('test');",
              "err": {},
              "uuid": "2bee84a6-c9b0-4f33-ab5e-8940351f7f92",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Get CAll using Json with assertions",
              "fullTitle": "Node fetch Demo Sample Get CAll using Json with assertions",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch('http://dummy.restapiexample.com/api/v1/employees');\nconst json = await response.json();\n_cdd‍.g.console.log(json);",
              "err": {},
              "uuid": "6dbb1ba6-0193-41e7-bc93-6c78f541650e",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample POST CAll using Json with assertions",
              "fullTitle": "Node fetch Demo Sample POST CAll using Json with assertions",
              "timedOut": false,
              "duration": 1333,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body1 = {name:\"test\",salary:\"123\",age:\"23\"};\nconst response = await fetch('http://dummy.restapiexample.com/api/v1/create', {\n    method: 'POST',\n    body: JSON.stringify(body1),\n    headers: {'Content-Type': 'application/json'}\n});\nconst sta = await response.statusCode;\nconst json = await response.json();\nexpect(json.status).to.equal('success');\nexpect(json.data.salary).to.equal('123');\n_cdd‍.g.console.log(json+ ' '+sta);",
              "err": {},
              "uuid": "d9cb89e1-42ce-4381-acc5-6000704997d3",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Get CAll with input using Json - 2",
              "fullTitle": "Node fetch Demo Sample Get CAll with input using Json - 2",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//const input1 = 1;\n        // const response =  fetch(`http://dummy.restapiexample.com/api/v1/employee/${input1}`);\n        // const json = await response.json();\n        const response =  fetch('https://reqres.in/api/users?page=2');\n        expect(response).to.be.successful();\n        //expect(response).to.haveStatus(200);\n        /*/!*return expect(fetch('https://reqres.in/api/users?page=2')).to.be.successful();\n        return expect(fetch('https://reqres.in/api/users?page=2')).to.be.successful();*!/*/",
              "err": {},
              "uuid": "a96077a0-3aa4-4d2a-9ed3-e90ca57f7885",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Get CAll with input using Json - 3",
              "fullTitle": "Node fetch Demo Sample Get CAll with input using Json - 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return expect(fetch('https://reqres.in/api/users?page=2')).to.be.successful();",
              "err": {},
              "uuid": "69ef57bb-c8d5-41a4-ae25-cdb2f57c7f6b",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Get CAll with input using Json - 4",
              "fullTitle": "Node fetch Demo Sample Get CAll with input using Json - 4",
              "timedOut": false,
              "duration": 316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(`https://reqres.in/api/users?page=2`);\nconst json = await response.json();\n_cdd‍.g.console.log(json);",
              "err": {},
              "uuid": "15849047-5eaa-43e5-8c5e-5e2b208468ca",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Get CAll with input using Json - 3",
              "fullTitle": "Node fetch Demo Sample Get CAll with input using Json - 3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return expect(fetch('https://reqres.in/api/users?page=2')).to.haveBodyText({ company: 'StatusCode Weekly',\n            url: 'http://statuscode.org/',\n            text:\n                'A weekly newsletter focusing on software development, infrastructure, the server, performance, and the stack end of things.' })",
              "err": {},
              "uuid": "721ebfea-34bc-4727-b4a9-c6a38f6b9e36",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Post CAll with input using Json - 1",
              "fullTitle": "Node fetch Demo Sample Post CAll with input using Json - 1",
              "timedOut": false,
              "duration": 690,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body1 = {\n    name: \"morpheus\",\n    job: \"leader\"\n};\nconst response = await fetch(`https://reqres.in/api/users`, {\n    method: 'POST',\n    body: JSON.stringify(body1),\n    headers: {'Content-Type': 'application/json'}\n});\nconst json = await response.json();\n_cdd‍.g.console.log(json);",
              "err": {},
              "uuid": "1b129e0d-166d-44c5-a58a-4961bef9ee9d",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sample Post CAll with input using Json - 2-assertionss",
              "fullTitle": "Node fetch Demo Sample Post CAll with input using Json - 2-assertionss",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body1 = {\n    name: \"morpheus\",\n    job: \"leader\"\n};\nconst response = fetch(`https://reqres.in/api/users`, {\n    method: 'POST',\n    body: JSON.stringify(body1),\n    headers: {'Content-Type': 'application/json'}\n});\nexpect(response).to.be.successful();\nconsole.log('----------------')\nexpect(response).to.haveBodyObject( {name: 'morpheus'});\nconsole.log('After')",
              "err": {},
              "uuid": "ee0849a1-a82c-4768-9cbf-f76d70fdc8ba",
              "parentUUID": "23785f76-6d9a-44db-a6cd-a61fc419cc5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5871bd2c-07fa-4306-839b-aa0f9b4cd270",
            "8e64ae13-cf29-4322-b6a9-0ea1c24e8b2c",
            "2bee84a6-c9b0-4f33-ab5e-8940351f7f92",
            "6dbb1ba6-0193-41e7-bc93-6c78f541650e",
            "d9cb89e1-42ce-4381-acc5-6000704997d3",
            "a96077a0-3aa4-4d2a-9ed3-e90ca57f7885",
            "69ef57bb-c8d5-41a4-ae25-cdb2f57c7f6b",
            "15849047-5eaa-43e5-8c5e-5e2b208468ca",
            "721ebfea-34bc-4727-b4a9-c6a38f6b9e36",
            "1b129e0d-166d-44c5-a58a-4961bef9ee9d",
            "ee0849a1-a82c-4768-9cbf-f76d70fdc8ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5431,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}